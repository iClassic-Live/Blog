// ShowNote/ShowNote.js

//本方法仅做实验用途，实际应用过程中会导致小程序运行非常卡顿

var e; //用于承接Page函数的作用域


/* 页面构造器：页面功能初始化 */
Page({

  /* 页面默认功能 */

  /* 页面的初始数据 */
  data: {

  },
  //自定义数据渲染函数
  rendering: (() => {
    setInterval(() => { //使用定时器实时扫描并更新数据
      if (e !== undefined) { //只有获取到page的作用域时才开始数据渲染扫描
        (function rendering(items, res, path, tag) { //对data进行深度遍历并深度比较data与状态缓存的差别以保证数据实时渲染
          if (res instanceof Array) { //若遍历到的数据类型为数组则对该数据再遍历
            res.forEach((ele, index) => {
              rendering(items, ele, (() => {
                if (path !== undefined) {
                  return path + "[" + index + "]";
                } else return index;
              })(), tag);
            });
          } else if (typeof res === "object") { //若遍历到的数据类型为对象且不是数组则对该数据再遍历
            for (let prop in res) {
              if (res.hasOwnProperty(prop)) {
                rendering(items, res[prop], (() => {
                  if (path !== undefined) {
                    return path + "." + prop;
                  } else return prop;
                })(), tag);
              }
            }
          } else { //只有遍历到的数据不是引用值时才进行data与状态缓存的比较并实时更新对应数据
            var item1 = JSON.stringify(items[0]);
            var item2 = items[1];
            if (item1 !== item2) { //若进行深度比较后发现数据有变在进行渲染
              let data = new Object();
              data[path] = res;
              e.setData(e.data);
              e.status = JSON.stringify(e.data); //渲染完成后改变状态缓存
            }
          }
        })([e.data, e.status], e.data);
      }
    });
  })(),
  /* 生命周期函数--监听页面加载 */
  onLoad(res) {
    console.log("ShowNote onLoad");
    e = this; //将page的作用域传到外部变量
    this.status = JSON.stringify(this.data); //获取当前data状态并缓存
  },

  /* 生命周期函数--监听页面显示 */
  onShow(res) {
    console.log("ShowNote onShow");
  },

  /* 生命周期函数--监听页面初次渲染完成 */
  onReady(res) {
    console.log("ShowNote onReady");
  },

  /* 生命周期函数--监听页面隐藏 */
  onHide(res) {
    console.log("ShowNote onHide");
  },

  /* 生命周期函数--监听页面卸载 */
  onUnload(res) {
    console.log("ShowNote onUnload");
  }

});
